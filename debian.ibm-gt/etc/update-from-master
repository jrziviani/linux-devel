#!/bin/bash -eu

function print_var()
{
	printf "%-15s : %s%s\n" "${1}" "${!1}" "${2:-}"
}

function out()
{
	trap - EXIT INT TERM HUP
	echo "Failed" >&2
	exit 1
}

trap out EXIT INT TERM HUP

. debian/debian.env
debian_dir=${DEBIAN}

kernel_version=$(dpkg-parsechangelog -l"${debian_dir}/changelog" -SVersion)
kernel_version=${kernel_version%%.0-*}

master_release=$(dpkg-parsechangelog -ldebian.master/changelog -SDistribution)
master_repo=https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/${master_release}

print_var debian_dir
print_var kernel_version
print_var master_release
print_var master_repo

# Fetch the upstream tag, i.e. v4.10, which is required by
# debian/rules insertchanges
git fetch --no-tags "${master_repo}" "v${kernel_version}" \
    "refs/tags/v${kernel_version}:refs/tags/v${kernel_version}"

# Fetch without tags to no pollute the repo with Ubuntu master tags
git fetch --no-tags "${master_repo}"
git fetch --no-tags "${master_repo}" master-next

# Find the commit of the most recent tag on the Ubuntu master-next branch
master_commit=$(git log --oneline FETCH_HEAD | \
					awk '/ UBUNTU: Ubuntu-[0-9]/ { print $1 ; exit }')
master_subject=$(git --no-pager log --format=%s "${master_commit}" -1)

print_var master_commit " (\"${master_subject}\")"

# Find the commit of the most recent tag on the current branch
current_commit=$(git log --oneline | \
					 awk '/ UBUNTU: Ubuntu-[0-9]/ { print $1 ; exit }')
current_subject=$(git --no-pager log --format=%s "${current_commit}" -1)

print_var current_commit " (\"${current_subject}\")"

# do the rebase
if [ "${master_commit}" = "${current_commit}" ] ; then
    echo "Branch is already up to date" >&2
    exit 1
fi
git rebase --onto "${master_commit}" "${current_commit}"

trap - EXIT INT TERM HUP
